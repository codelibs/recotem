services:
  queue:
    image: rabbitmq:4.0
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: "5s"
      timeout: "3s"
      retries: 5
      start_period: "5s"
    env_file:
      - envs/production.env
  db:
    image: postgres:12
    volumes:
      - db-data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "recotem_user", "-d", "recotem"]
      interval: "5s"
      timeout: "3s"
      retries: 5
      start_period: "5s"
    env_file:
      - envs/production.env
  backend:
    depends_on:
      db:
        condition: service_healthy
      queue:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    volumes:
      - data-location:/app/data
      - static-files:/app/dist/static
    healthcheck:
      test: curl -f http://localhost:80/api/ping/ || exit 1
      interval: 5s
      timeout: 5s
      start_period: 20s
      retries: 10
    env_file:
      - envs/production.env
  celery_worker:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: celery.dockerfile
    volumes:
      - data-location:/app/data
    env_file:
      - envs/production.env
  frontend:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    env_file:
      - envs/production.env
  proxy:
    depends_on:
      - frontend
    image: nginx:1.27.3
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static-files:/app/dist/static
    ports:
      - "8000:80"
volumes:
  data-location:
    driver: local
  db-data:
    driver: local
  static-files:
    driver: local
