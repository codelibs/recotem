/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/auth/login/": {
    /**
     * Check the credentials and return the REST Token
     * if the credentials are valid and authenticated.
     * Calls Django Auth login method to register User ID
     * in Django session framework
     *
     * Accept the following POST parameters: username, password
     * Return the REST Framework Token Object's key.
     */
    post: operations["auth_login_create"];
  };
  "/api/auth/logout/": {
    /**
     * Calls Django logout method and delete the Token object
     * assigned to the current User object.
     *
     * Accepts/Returns nothing.
     */
    post: operations["auth_logout_create"];
  };
  "/api/auth/password/change/": {
    /**
     * Calls Django Auth SetPasswordForm save method.
     *
     * Accepts the following POST parameters: new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_change_create"];
  };
  "/api/auth/password/reset/": {
    /**
     * Calls Django Auth PasswordResetForm save method.
     *
     * Accepts the following POST parameters: email
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_create"];
  };
  "/api/auth/password/reset/confirm/": {
    /**
     * Password reset e-mail link is confirmed, therefore
     * this resets the user's password.
     *
     * Accepts the following POST parameters: token, uid,
     *     new_password1, new_password2
     * Returns the success/fail message.
     */
    post: operations["auth_password_reset_confirm_create"];
  };
  "/api/auth/token/refresh/": {
    /**
     * Takes a refresh type JSON web token and returns an access type JSON web
     * token if the refresh token is valid.
     */
    post: operations["auth_token_refresh_create"];
  };
  "/api/auth/token/verify/": {
    /**
     * Takes a token and indicates if it is valid.  This view provides no
     * information about a token's fitness for a particular use.
     */
    post: operations["auth_token_verify_create"];
  };
  "/api/auth/user/": {
    /**
     * Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    get: operations["auth_user_retrieve"];
    /**
     * Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    put: operations["auth_user_update"];
    /**
     * Reads and updates UserModel fields
     * Accepts GET, PUT, PATCH methods.
     *
     * Default accepted fields: username, first_name, last_name
     * Default display fields: pk, username, email, first_name, last_name
     * Read-only fields: pk, email
     *
     * Returns UserModel fields.
     */
    patch: operations["auth_user_partial_update"];
  };
  "/api/evaluation_config/": {
    get: operations["evaluation_config_list"];
    post: operations["evaluation_config_create"];
  };
  "/api/evaluation_config/{id}/": {
    get: operations["evaluation_config_retrieve"];
    put: operations["evaluation_config_update"];
    delete: operations["evaluation_config_destroy"];
    patch: operations["evaluation_config_partial_update"];
  };
  "/api/item_meta_data/": {
    get: operations["item_meta_data_list"];
    post: operations["item_meta_data_create"];
  };
  "/api/item_meta_data/{id}/": {
    get: operations["item_meta_data_retrieve"];
    put: operations["item_meta_data_update"];
    delete: operations["item_meta_data_destroy"];
    patch: operations["item_meta_data_partial_update"];
  };
  "/api/item_meta_data/{id}/download_file/": {
    get: operations["item_meta_data_download_file_retrieve"];
  };
  "/api/item_meta_data/{id}/unlink_file/": {
    delete: operations["item_meta_data_unlink_file_destroy"];
  };
  "/api/model_configuration/": {
    get: operations["model_configuration_list"];
    post: operations["model_configuration_create"];
  };
  "/api/model_configuration/{id}/": {
    get: operations["model_configuration_retrieve"];
    put: operations["model_configuration_update"];
    delete: operations["model_configuration_destroy"];
    patch: operations["model_configuration_partial_update"];
  };
  "/api/parameter_tuning_job/": {
    get: operations["parameter_tuning_job_list"];
    post: operations["parameter_tuning_job_create"];
  };
  "/api/parameter_tuning_job/{id}/": {
    get: operations["parameter_tuning_job_retrieve"];
    put: operations["parameter_tuning_job_update"];
    delete: operations["parameter_tuning_job_destroy"];
    patch: operations["parameter_tuning_job_partial_update"];
  };
  "/api/project/": {
    get: operations["project_list"];
    post: operations["project_create"];
  };
  "/api/project/{id}/": {
    get: operations["project_retrieve"];
    put: operations["project_update"];
    delete: operations["project_destroy"];
    patch: operations["project_partial_update"];
  };
  "/api/project_summary/{id}/": {
    get: operations["project_summary_retrieve"];
  };
  "/api/schema/": {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["schema_retrieve"];
  };
  "/api/split_config/": {
    get: operations["split_config_list"];
    post: operations["split_config_create"];
  };
  "/api/split_config/{id}/": {
    get: operations["split_config_retrieve"];
    put: operations["split_config_update"];
    delete: operations["split_config_destroy"];
    patch: operations["split_config_partial_update"];
  };
  "/api/task_log/": {
    get: operations["task_log_list"];
  };
  "/api/task_log/{id}/": {
    get: operations["task_log_retrieve"];
  };
  "/api/trained_model/": {
    get: operations["trained_model_list"];
    post: operations["trained_model_create"];
  };
  "/api/trained_model/{id}/": {
    get: operations["trained_model_retrieve"];
    put: operations["trained_model_update"];
    delete: operations["trained_model_destroy"];
    patch: operations["trained_model_partial_update"];
  };
  "/api/trained_model/{id}/download_file/": {
    get: operations["trained_model_download_file_retrieve"];
  };
  "/api/trained_model/{id}/sample_recommendation_metadata/{metadata_id}/": {
    get: operations["trained_model_sample_recommendation_metadata_retrieve"];
  };
  "/api/trained_model/{id}/sample_recommendation_raw/": {
    get: operations["trained_model_sample_recommendation_raw_retrieve"];
  };
  "/api/trained_model/{id}/unlink_file/": {
    delete: operations["trained_model_unlink_file_destroy"];
  };
  "/api/training_data/": {
    get: operations["training_data_list"];
    post: operations["training_data_create"];
  };
  "/api/training_data/{id}/": {
    get: operations["training_data_retrieve"];
    put: operations["training_data_update"];
    delete: operations["training_data_destroy"];
    patch: operations["training_data_partial_update"];
  };
  "/api/training_data/{id}/download_file/": {
    get: operations["training_data_download_file_retrieve"];
  };
  "/api/training_data/{id}/unlink_file/": {
    delete: operations["training_data_unlink_file_destroy"];
  };
}

export interface components {
  schemas: {
    EvaluationConfig: {
      id: number;
      ins_datetime: string;
      name?: string | null;
      cutoff?: number;
      target_metric?: components["schemas"]["TargetMetricEnum"];
    };
    IDAndScore: {
      item_id: string;
      score: number;
    };
    ItemMetaData: {
      id: number;
      project: number;
      file?: string | null;
      valid_columns_list_json: string;
      ins_datetime: string;
      basename: string | null;
      filesize: number;
    };
    /** Serializer for JWT authentication. */
    JWT: {
      access_token: string;
      refresh_token: string;
      user: components["schemas"]["UserDetails"];
    };
    Login: {
      username?: string;
      email?: string;
      password: string;
    };
    ModelConfiguration: {
      id: number;
      tuning_job: number;
      name?: string | null;
      project: number;
      recommender_class_name: string;
      parameters_json: string;
      ins_datetime: string;
    };
    PaginatedItemMetaDataList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["ItemMetaData"][];
    };
    PaginatedModelConfigurationList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["ModelConfiguration"][];
    };
    PaginatedParameterTuningJobList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["ParameterTuningJob"][];
    };
    PaginatedTrainedModelList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["TrainedModel"][];
    };
    PaginatedTrainingDataList: {
      count?: number;
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["TrainingData"][];
    };
    ParameterTuningJob: {
      id: number;
      data: number;
      split: number;
      evaluation: number;
      n_tasks_parallel?: number;
      n_trials?: number;
      memory_budget?: number;
      timeout_overall?: number | null;
      timeout_singlestep?: number | null;
      random_seed?: number | null;
      tried_algorithms_json?: string | null;
      irspack_version?: string | null;
      train_after_tuning?: boolean;
      best_score?: number | null;
      tuned_model?: number | null;
      best_config?: number | null;
      ins_datetime: string;
      task_links: components["schemas"]["TaskAndParameterJobLink"][];
    };
    PasswordChange: {
      new_password1: string;
      new_password2: string;
    };
    /** Serializer for requesting a password reset e-mail. */
    PasswordReset: {
      email: string;
    };
    /** Serializer for confirming a password reset attempt. */
    PasswordResetConfirm: {
      new_password1: string;
      new_password2: string;
      uid: string;
      token: string;
    };
    PatchedEvaluationConfig: {
      id?: number;
      ins_datetime?: string;
      name?: string | null;
      cutoff?: number;
      target_metric?: components["schemas"]["TargetMetricEnum"];
    };
    PatchedItemMetaData: {
      id?: number;
      project?: number;
      file?: string | null;
      valid_columns_list_json?: string;
      ins_datetime?: string;
      basename?: string | null;
      filesize?: number;
    };
    PatchedModelConfiguration: {
      id?: number;
      tuning_job?: number;
      name?: string | null;
      project?: number;
      recommender_class_name?: string;
      parameters_json?: string;
      ins_datetime?: string;
    };
    PatchedParameterTuningJob: {
      id?: number;
      data?: number;
      split?: number;
      evaluation?: number;
      n_tasks_parallel?: number;
      n_trials?: number;
      memory_budget?: number;
      timeout_overall?: number | null;
      timeout_singlestep?: number | null;
      random_seed?: number | null;
      tried_algorithms_json?: string | null;
      irspack_version?: string | null;
      train_after_tuning?: boolean;
      best_score?: number | null;
      tuned_model?: number | null;
      best_config?: number | null;
      ins_datetime?: string;
      task_links?: components["schemas"]["TaskAndParameterJobLink"][];
    };
    PatchedProject: {
      id?: number;
      ins_datetime?: string;
      name?: string;
      user_column?: string;
      item_column?: string;
      time_column?: string | null;
    };
    PatchedSplitConfig: {
      id?: number;
      ins_datetime?: string;
      name?: string | null;
      scheme?: components["schemas"]["SchemeEnum"];
      heldout_ratio?: number;
      n_heldout?: number | null;
      test_user_ratio?: number;
      n_test_users?: number | null;
      random_seed?: number;
    };
    PatchedTrainedModel: {
      id?: number;
      configuration?: number;
      data_loc?: number;
      file?: string | null;
      irspack_version?: string | null;
      ins_datetime?: string;
      basename?: string | null;
      filesize?: number;
      task_links?: components["schemas"]["TaskAndTrainedModelLink"][];
    };
    PatchedTrainingData: {
      id?: number;
      project?: number;
      file?: string | null;
      ins_datetime?: string;
      basename?: string | null;
      filesize?: number;
    };
    /** User model w/o password */
    PatchedUserDetails: {
      pk?: number;
      /** Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username?: string;
      email?: string;
      first_name?: string;
      last_name?: string;
    };
    Project: {
      id: number;
      ins_datetime: string;
      name: string;
      user_column: string;
      item_column: string;
      time_column?: string | null;
    };
    ProjectSummary: {
      id: number;
      name: string;
      user_column: string;
      item_column: string;
      time_column?: string | null;
      ins_datetime: string;
      trainingdata_set: components["schemas"]["TrainingDataForSummary"][];
    };
    RawRecommendation: {
      user_id: string;
      user_profile: string[];
      recommendations: components["schemas"]["IDAndScore"][];
    };
    RecommendationWithMetaData: {
      user_id: string;
      user_profile: string;
      recommendations: string;
    };
    RestAuthDetail: {
      detail: string;
    };
    SchemeEnum: "RG" | "TG" | "TU";
    SplitConfig: {
      id: number;
      ins_datetime: string;
      name?: string | null;
      scheme?: components["schemas"]["SchemeEnum"];
      heldout_ratio?: number;
      n_heldout?: number | null;
      test_user_ratio?: number;
      n_test_users?: number | null;
      random_seed?: number;
    };
    StatusEnum:
      | "FAILURE"
      | "PENDING"
      | "RECEIVED"
      | "RETRY"
      | "REVOKED"
      | "STARTED"
      | "SUCCESS";
    TargetMetricEnum: "ndcg" | "map" | "recall" | "hit";
    TaskAndParameterJobLink: {
      task: components["schemas"]["TaskResult"];
    };
    TaskAndTrainedModelLink: {
      task: components["schemas"]["TaskResult"];
    };
    TaskLog: {
      id: number;
      ins_datetime: string;
      contents?: string;
      task: number;
    };
    TaskResult: {
      /** Celery ID for the Task that was run */
      task_id: string;
      /** Current state of the task being run */
      status?: components["schemas"]["StatusEnum"];
      /** Datetime field when the task result was created in UTC */
      date_created: string;
      /** Datetime field when the task was completed in UTC */
      date_done: string;
      /** Text of the traceback if the task generated one */
      traceback?: string | null;
    };
    TokenRefresh: {
      access: string;
      refresh: string;
    };
    TokenVerify: {
      token: string;
    };
    TrainedModel: {
      id: number;
      configuration: number;
      data_loc: number;
      file?: string | null;
      irspack_version?: string | null;
      ins_datetime: string;
      basename: string | null;
      filesize: number;
      task_links: components["schemas"]["TaskAndTrainedModelLink"][];
    };
    TrainingData: {
      id: number;
      project: number;
      file?: string | null;
      ins_datetime: string;
      basename: string | null;
      filesize: number;
    };
    TrainingDataForSummary: {
      id: number;
      n_parameter_tuning_jobs: number;
      n_trained_models: number;
    };
    /** User model w/o password */
    UserDetails: {
      pk: number;
      /** Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      email: string;
      first_name?: string;
      last_name?: string;
    };
  };
}

export interface operations {
  /**
   * Check the credentials and return the REST Token
   * if the credentials are valid and authenticated.
   * Calls Django Auth login method to register User ID
   * in Django session framework
   *
   * Accept the following POST parameters: username, password
   * Return the REST Framework Token Object's key.
   */
  auth_login_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JWT"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
      };
    };
  };
  /**
   * Calls Django logout method and delete the Token object
   * assigned to the current User object.
   *
   * Accepts/Returns nothing.
   */
  auth_logout_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
  };
  /**
   * Calls Django Auth SetPasswordForm save method.
   *
   * Accepts the following POST parameters: new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_change_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordChange"];
      };
    };
  };
  /**
   * Calls Django Auth PasswordResetForm save method.
   *
   * Accepts the following POST parameters: email
   * Returns the success/fail message.
   */
  auth_password_reset_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordReset"];
      };
    };
  };
  /**
   * Password reset e-mail link is confirmed, therefore
   * this resets the user's password.
   *
   * Accepts the following POST parameters: token, uid,
   *     new_password1, new_password2
   * Returns the success/fail message.
   */
  auth_password_reset_confirm_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RestAuthDetail"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetConfirm"];
      };
    };
  };
  /**
   * Takes a refresh type JSON web token and returns an access type JSON web
   * token if the refresh token is valid.
   */
  auth_token_refresh_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefresh"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefresh"];
      };
    };
  };
  /**
   * Takes a token and indicates if it is valid.  This view provides no
   * information about a token's fitness for a particular use.
   */
  auth_token_verify_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TokenVerify"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenVerify"];
      };
    };
  };
  /**
   * Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  /**
   * Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_update: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserDetails"];
      };
    };
  };
  /**
   * Reads and updates UserModel fields
   * Accepts GET, PUT, PATCH methods.
   *
   * Default accepted fields: username, first_name, last_name
   * Default display fields: pk, username, email, first_name, last_name
   * Read-only fields: pk, email
   *
   * Returns UserModel fields.
   */
  auth_user_partial_update: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedUserDetails"];
      };
    };
  };
  evaluation_config_list: {
    parameters: {
      query: {
        id?: number;
        name?: string;
        unnamed?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationConfig"][];
        };
      };
    };
  };
  evaluation_config_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EvaluationConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluationConfig"];
      };
    };
  };
  evaluation_config_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this evaluation config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationConfig"];
        };
      };
    };
  };
  evaluation_config_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this evaluation config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluationConfig"];
      };
    };
  };
  evaluation_config_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this evaluation config. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  evaluation_config_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this evaluation config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedEvaluationConfig"];
      };
    };
  };
  item_meta_data_list: {
    parameters: {
      query: {
        id?: number;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
        project?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedItemMetaDataList"];
        };
      };
    };
  };
  item_meta_data_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ItemMetaData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ItemMetaData"];
      };
    };
  };
  item_meta_data_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ItemMetaData"];
        };
      };
    };
  };
  item_meta_data_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ItemMetaData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ItemMetaData"];
      };
    };
  };
  item_meta_data_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  item_meta_data_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ItemMetaData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["PatchedItemMetaData"];
      };
    };
  };
  item_meta_data_download_file_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ItemMetaData"];
        };
      };
    };
  };
  item_meta_data_unlink_file_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this item meta data. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  model_configuration_list: {
    parameters: {
      query: {
        id?: number;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
        project?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedModelConfigurationList"];
        };
      };
    };
  };
  model_configuration_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ModelConfiguration"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelConfiguration"];
      };
    };
  };
  model_configuration_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this model configuration. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ModelConfiguration"];
        };
      };
    };
  };
  model_configuration_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this model configuration. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ModelConfiguration"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelConfiguration"];
      };
    };
  };
  model_configuration_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this model configuration. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  model_configuration_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this model configuration. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ModelConfiguration"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedModelConfiguration"];
      };
    };
  };
  parameter_tuning_job_list: {
    parameters: {
      query: {
        data?: number;
        data__project?: number;
        id?: number;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedParameterTuningJobList"];
        };
      };
    };
  };
  parameter_tuning_job_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ParameterTuningJob"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParameterTuningJob"];
      };
    };
  };
  parameter_tuning_job_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this parameter tuning job. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParameterTuningJob"];
        };
      };
    };
  };
  parameter_tuning_job_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this parameter tuning job. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParameterTuningJob"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParameterTuningJob"];
      };
    };
  };
  parameter_tuning_job_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this parameter tuning job. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  parameter_tuning_job_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this parameter tuning job. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ParameterTuningJob"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedParameterTuningJob"];
      };
    };
  };
  project_list: {
    parameters: {
      query: {
        id?: number;
        name?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
    };
  };
  project_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Project"];
      };
    };
  };
  project_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this project. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
  };
  project_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this project. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Project"];
      };
    };
  };
  project_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this project. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  project_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this project. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedProject"];
      };
    };
  };
  project_summary_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this project. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectSummary"];
        };
      };
    };
  };
  /**
   * OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  schema_retrieve: {
    parameters: {
      query: {
        format?: "json" | "yaml";
        lang?:
          | "af"
          | "ar"
          | "ar-dz"
          | "ast"
          | "az"
          | "be"
          | "bg"
          | "bn"
          | "br"
          | "bs"
          | "ca"
          | "cs"
          | "cy"
          | "da"
          | "de"
          | "dsb"
          | "el"
          | "en"
          | "en-au"
          | "en-gb"
          | "eo"
          | "es"
          | "es-ar"
          | "es-co"
          | "es-mx"
          | "es-ni"
          | "es-ve"
          | "et"
          | "eu"
          | "fa"
          | "fi"
          | "fr"
          | "fy"
          | "ga"
          | "gd"
          | "gl"
          | "he"
          | "hi"
          | "hr"
          | "hsb"
          | "hu"
          | "hy"
          | "ia"
          | "id"
          | "ig"
          | "io"
          | "is"
          | "it"
          | "ja"
          | "ka"
          | "kab"
          | "kk"
          | "km"
          | "kn"
          | "ko"
          | "ky"
          | "lb"
          | "lt"
          | "lv"
          | "mk"
          | "ml"
          | "mn"
          | "mr"
          | "my"
          | "nb"
          | "ne"
          | "nl"
          | "nn"
          | "os"
          | "pa"
          | "pl"
          | "pt"
          | "pt-br"
          | "ro"
          | "ru"
          | "sk"
          | "sl"
          | "sq"
          | "sr"
          | "sr-latn"
          | "sv"
          | "sw"
          | "ta"
          | "te"
          | "tg"
          | "th"
          | "tk"
          | "tr"
          | "tt"
          | "udm"
          | "uk"
          | "ur"
          | "uz"
          | "vi"
          | "zh-hans"
          | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": { [key: string]: any };
          "application/yaml": { [key: string]: any };
          "application/vnd.oai.openapi+json": { [key: string]: any };
          "application/json": { [key: string]: any };
        };
      };
    };
  };
  split_config_list: {
    parameters: {
      query: {
        id?: number;
        name?: string;
        unnamed?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SplitConfig"][];
        };
      };
    };
  };
  split_config_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SplitConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SplitConfig"];
      };
    };
  };
  split_config_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this split config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SplitConfig"];
        };
      };
    };
  };
  split_config_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this split config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SplitConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SplitConfig"];
      };
    };
  };
  split_config_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this split config. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  split_config_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this split config. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SplitConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedSplitConfig"];
      };
    };
  };
  task_log_list: {
    parameters: {
      query: {
        id?: number;
        id_gt?: number;
        model_id?: number;
        tuning_job_id?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskLog"][];
        };
      };
    };
  };
  task_log_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this task log. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TaskLog"];
        };
      };
    };
  };
  trained_model_list: {
    parameters: {
      query: {
        data_loc?: number;
        data_loc__project?: number;
        id?: number;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTrainedModelList"];
        };
      };
    };
  };
  trained_model_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TrainedModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrainedModel"];
      };
    };
  };
  trained_model_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainedModel"];
        };
      };
    };
  };
  trained_model_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainedModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrainedModel"];
      };
    };
  };
  trained_model_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  trained_model_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainedModel"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTrainedModel"];
      };
    };
  };
  trained_model_download_file_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainedModel"];
        };
      };
    };
  };
  trained_model_sample_recommendation_metadata_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
        metadata_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RecommendationWithMetaData"];
        };
      };
    };
  };
  trained_model_sample_recommendation_raw_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RawRecommendation"];
        };
      };
    };
  };
  trained_model_unlink_file_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this trained model. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  training_data_list: {
    parameters: {
      query: {
        id?: number;
        /** A page number within the paginated result set. */
        page?: number;
        /** Number of results to return per page. */
        page_size?: number;
        project?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTrainingDataList"];
        };
      };
    };
  };
  training_data_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TrainingData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["TrainingData"];
      };
    };
  };
  training_data_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainingData"];
        };
      };
    };
  };
  training_data_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainingData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["TrainingData"];
      };
    };
  };
  training_data_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  training_data_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainingData"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["PatchedTrainingData"];
      };
    };
  };
  training_data_download_file_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrainingData"];
        };
      };
    };
  };
  training_data_unlink_file_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this training data. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
}
